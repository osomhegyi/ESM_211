---
Name: Olivia
Portfolio: 5
Topic: Adehabitat - Home Range habitat notes
Date: February 1, 2024
---

# Adehabitat Lecture Notes

# Adehabitat
- Great for home ranges
- This package can be used for Connectivity & Fragmentation, Conservation Planning (Identifying priority areas), Disease Ecology, Informing Management Decisions

# Model overview
- Minimum convex polygons - polygons are calculated based on the area that the observed individuals have travelled in
- Kernel Density Estimation: to predict use across space

# What type of data is needed?
- Telemetry data - collected via radio collars, satellite transmitting tags, VHF
- To get this package to work, need to define a spatial points data frame. And then once you have that, you should be able to calculate the areas pretty easily.
- multiple ways to define your kernals
- the convex polygon is the home range



## Portfolio Assignment:


#load the packages

```{r setup, echo = TRUE, warning = FALSE, message = FALSE, results = FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, results = FALSE)

library(tidyverse)
library(here)
library(janitor)
library(adehabitatHR)
library(sp)
```

Creating kernels involves the same initial steps as creating MCPs. Like before, we'll start with 6 elk from the National Elk Refuge and create our SpatialPointsDataFrame. 

#read in the elk data!
```{r}
### Let's start as we did before: read in the csv and filter to 6 elk from the NER

elk <- read_csv(here("data", "elk_collar.csv"))

elk <- elk %>% 
  mutate_at("id", as.character)

elk_ner <- elk %>% 
  filter(feedground == "National_Elk_Refuge") %>%  
  filter(id %in% c("631", "632", "633", "634", "635", "636")) 
```

#now lets make our dataframe into a spatial dataframe
```{r}
### Same process creating your SpatialPointsDataFrame

elk_ner <- elk_ner[!is.na(elk_ner$x) & !is.na(elk_ner$y),]

elk.sp <- elk_ner[, c("id", "x", "y")] 

coordinates(elk.sp) <- c("x", "y")

proj4string(elk.sp) <- CRS("+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs")
```

#lets select the h using the reference bandwidth

Use the `kernelUD` function to create our kernels. There are multiple approaches to choosing h. The default for this function is "reference bandwidth," which works relatively well with most telemetry data. The downside is that it tends towards "oversmoothing," meaning it often estimates a larger home range than other methods of choosing h. 

```{r}
kernel.ref <- kernelUD(elk.sp, h = "href")  # href = the reference bandwidth
image(kernel.ref) # plot
```

```{r}
kernel.ref[[1]]@h # The smoothing factor is stored for each animal in the "h" slot
```

#now lets try the other method of selecting h- Least squares cross validation

A second common method of choosing h is "least squares cross validation," which minimizes the error by comparing the prediction from all data points to the data minus each point. It works especially well if you have GPS collar data with frequently collected locations. However, it may not be as appropriate for infrequent relocation data (every few days or less). 

```{r}
kernel.lscv <- kernelUD(elk.sp, h = "LSCV") ### Least squares cross validation
```

```{r}
image(kernel.lscv) ### plot
```

You can visually inspect a plot of the LSCV kernels to see how well this method might fit your data. Ideally, you want to look for a dip in the CV value and the h value that corresponds to the minimum CV is used. If there is no minimum (no dip), this can sometimes lead to errors in plotting the kernels. If an animal's habitat is fragmented or if the relocation data is otherwise infrequent, then the LSCV method may not be as appropriate for the data. 

```{r}
plotLSCV(kernel.lscv) ### Look for a dip
```

Use the `getverticeshr` function to measure home ranges by setting a percentage of the distribution within the contour lines. A 95% distribution within the contour is the default, but it can be manually changed, along with the default units (hectares are the default output). Like with the MCPs, knowing a species' biology is important in selecting the percentage. A 95% distribution may be ideal for many reptiles and amphibians but not necessarily for other types of animals. 

```{r}
elk.kernel.poly <- getverticeshr(kernel.ref, percent = 95) 
print(elk.kernel.poly)  # returns the area of each polygon
```

#lets plot it 
```{r}
color <- rep("white", nrow(elk.sp@data))
  color[(elk.sp@data$id == "632")] <- "red"
  color[(elk.sp@data$id == "633")] <- "green"
  color[(elk.sp@data$id == "634")] <- "blue"
  color[(elk.sp@data$id == "635")] <- "orange"
  color[(elk.sp@data$id == "636")] <- "yellow"
plot(elk.kernel.poly, col = elk.kernel.poly@data$id)
  plot(elk.sp, add = TRUE, col = color, pch = 21)
```

#Porfolio Assignment Questions Part 2:
2. Compare the plots from the 2 methods of choosing "h". Which is more suitable for the elk?
3. Explore how changing the feedground or elk individuals changes the home-range. What is one thing that stands out to you that is notable/different?



#OPTIONAL- Like with the MCPs, you can repeat this process with the fed elk herds instead of the individual animals, though your computer may get a bit of a workout attempting to create kernels for more than one or two herds at a time, especially through the LSCV method. For the sake of time, we'll skip this today, but if you happen to have time to kill, feel free to go for it!














